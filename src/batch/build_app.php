<?php
/**
 * Generate a data file with timestamps which is used by factory /lib/core/coreWebResponse
 * to add versioning of javascript and stylesheets on the client.
 * 
 * Usage:
 * 
 *   php batch/build_app.php --webroot <path> --out <file.php>
 * 
 * Example:
 * 
 *   php batch/build_app.php -w web -o config/versioning.inc.php
 * 
 * @author   Fabrice Denis
 */

require_once(realpath(dirname(__FILE__).'/..').'/lib/batch/Command_CLI.php');

class BuildApp extends Command_CLI
{
  // list of resources for which we want versioning
  // - use GLOB PATTERNS
  // - MUST be descendants of the --webroot option
  const INCLUDE_ASSETS = [
    'web/build/revtk/*.min.js',
    'web/build/pack/*.min.css',
    'web/build/pack/*.min.js'
  ];
  
  public function __construct()
  {
    parent::__construct(array(
      'webroot|w=s'  => 'The web document root (required)',
      'out|o=s'      => 'Output filename (required)',
      'list|l'       => 'List all versioned resources and exits'
    ));

    $this->webPath = $this->opts->webroot;
    if (null === $this->webPath) {
      $this->throwError('Required --webroot flag. Type --help for help.');      
    }

    $files = $this->crawl(self::INCLUDE_ASSETS);
    if ($this->getFlag('list'))
    {
      echo implode("\n", $files);
      echo sprintf("\n\n%s versioned resources.\n", count($files));
      exit();
    }

    $this->verbose("\n%s versioned resources.\n", count($files));

    $outfile = $this->getFlag('o');
    if (null === $outfile) {
      $this->throwError('Required --out flag. Type --help for help.');
    }
    
    $contents = $this->build($files);

    if (false === file_put_contents($outfile, $contents))
    {
      $this->throwError('Error writing to outfile "%s".', $outfile);
    }
    
    $this->verbose('Success! (output file "%s").', $outfile);
  }
  
  private function crawl(array $includeAssets)
  {
    $assets = [];

    foreach ($includeAssets as $pattern) {
      $files = glob($pattern);
      $assets = array_merge($assets, $files);
    }

    $assets = array_map(function($path) {
      return $this->normalizeForwardSlashes($path);
    }, $assets);

    return $assets;
  }

  /**
   * Replace any Windows-style backslashes with slashes.
   * 
   * @param  string $path  Fully qualified path name
   * @return string
   */
  protected function normalizeForwardSlashes($path)
  {
    return preg_replace('/[\/\\\]/', '/', $path);
  }

  /**
   * Create the php file that can be included to have timestamp information
   * for all the revved files.
   * 
   * @return string    Content to save as a php file 
   */
  private function build($files)
  {
    $doc_file = __FILE__;

    $doc_time = date('F j, Y G:i:s');
    
    // start buffering content of this file
    ob_start();
    
echo <<<EOD
<?php
/**
 * This file was generated by script "$doc_file"
 * 
 * @date    $doc_time
 */
EOD;

    echo "\nreturn [\n";

    // noralize basepath of web document root to be substracted from the resource urls
    $basePath = $this->normalizeForwardSlashes(realpath($this->webPath));

    $assets = array();

    foreach ($files as $file)
    {
      $realFile = realpath($file);

      $timestamp = filemtime($realFile);
      
      // use as array key, the absolute url relative from the web root
      // (this should match the url passed to the stylesheet and javascript include helpers)
      $resourcePath = '/' . $this->getRelativePathFrom($realFile, $basePath);
      
      $assets[] = "'$resourcePath' => $timestamp";
    }
    
    echo implode(",\n", $assets) . "\n];";
    
    return ob_get_clean();
  }
}

$cmd = new BuildApp();

